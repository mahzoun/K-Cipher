//
// Created by sauron on 3/9/21.
//

#ifndef K_CIPHER_KCIPHER_H
#define K_CIPHER_KCIPHER_H

#include <functional>
#include <iostream>
#include <cstdint>
#include <random>
#include <bitset>
#include <chrono>

//#define N 128   //State size
//#define M 8  //Block size used in SBox inversion
using namespace std;
const int N = 128;
const int M = 8;
class KCipher {
public:
    uint64_t __kcipher_range_65_128_const_0[2] = {0x5f63c0ec346ddc37, 0xf98c63bbbbefa08e};
    uint64_t __kcipher_range_65_128_const_1[2] = {0x44aa7cb19f6d53a0, 0x43daa42d7323101a};
    uint64_t __kcipher_range_65_128_const_2[2] = {0xb3b27e401ae99fd0, 0x84177319f57a5e1b};
    uint8_t sbox[256] =
                    {0x63, 0x1, 0x8d, 0xf6, 0xcb, 0x52, 0x7b, 0xd1, 0xe8, 0x4f, 0x29, 0xc0, 0xb0, 0xe1, 0xe5, 0xc7,
                     0x74, 0xb4, 0xaa, 0x4b, 0x99, 0x2b, 0x60, 0x5f, 0x58, 0x3f, 0xfd, 0xcc, 0xff, 0x40, 0xee, 0xb2,
                     0x3a, 0x6e, 0x5a, 0xf1, 0x55, 0x4d, 0xa8, 0xc9, 0xc1, 0xa, 0x98, 0x15, 0x30, 0x44, 0xa2, 0xc2,
                     0x2c, 0x45, 0x92, 0x6c, 0xf3, 0x39, 0x66, 0x42, 0xf2, 0x35, 0x20, 0x6f, 0x77, 0xbb, 0x59, 0x19,
                     0x1d, 0xfe, 0x37, 0x67, 0x2d, 0x31, 0xf5, 0x69, 0xa7, 0x64, 0xab, 0x13, 0x54, 0x25, 0xe9, 0x9,
                     0xed, 0x5c, 0x5, 0xca, 0x4c, 0x24, 0x87, 0xbf, 0x18, 0x3e, 0x22, 0xf0, 0x51, 0xec, 0x61, 0x17,
                     0x16, 0x5e, 0xaf, 0xd3, 0x49, 0xa6, 0x36, 0x43, 0xf4, 0x47, 0x91, 0xdf, 0x33, 0x93, 0x21, 0x3b,
                     0x79, 0xb7, 0x97, 0x85, 0x10, 0xb5, 0xba, 0x3c, 0xb6, 0x70, 0xd0, 0x6, 0xa1, 0xfa, 0x81, 0x82,
                     0x83, 0x7e, 0x7f, 0x80, 0x96, 0x73, 0xbe, 0x56, 0x9b, 0x9e, 0x95, 0xd9, 0xf7, 0x2, 0xb9, 0xa4,
                     0xde, 0x6a, 0x32, 0x6d, 0xd8, 0x8a, 0x84, 0x72, 0x2a, 0x14, 0x9f, 0x88, 0xf9, 0xdc, 0x89, 0x9a,
                     0xfb, 0x7c, 0x2e, 0xc3, 0x8f, 0xb8, 0x65, 0x48, 0x26, 0xc8, 0x12, 0x4a, 0xce, 0xe7, 0xd2, 0x62,
                     0xc, 0xe0, 0x1f, 0xef, 0x11, 0x75, 0x78, 0x71, 0xa5, 0x8e, 0x76, 0x3d, 0xbd, 0xbc, 0x86, 0x57,
                     0xb, 0x28, 0x2f, 0xa3, 0xda, 0xd4, 0xe4, 0xf, 0xa9, 0x27, 0x53, 0x4, 0x1b, 0xfc, 0xac, 0xe6,
                     0x7a, 0x7, 0xae, 0x63, 0xc5, 0xdb, 0xe2, 0xea, 0x94, 0x8b, 0xc4, 0xd5, 0x9d, 0xf8, 0x90, 0x6b,
                     0xb1, 0xd, 0xd6, 0xeb, 0xc6, 0xe, 0xcf, 0xad, 0x8, 0x4e, 0xd7, 0xe3, 0x5d, 0x50, 0x1e, 0xb3,
                     0x5b, 0x23, 0x38, 0x34, 0x68, 0x46, 0x3, 0x8c, 0xdd, 0x9c, 0x7d, 0xa0, 0xcd, 0x1a, 0x41, 0x1c};

    uint8_t sbox_inv[256] =
                    {0x0, 0x1, 0x8d, 0xf6, 0xcb, 0x52, 0x7b, 0xd1, 0xe8, 0x4f, 0x29, 0xc0, 0xb0, 0xe1, 0xe5, 0xc7,
                     0x74, 0xb4, 0xaa, 0x4b, 0x99, 0x2b, 0x60, 0x5f, 0x58, 0x3f, 0xfd, 0xcc, 0xff, 0x40, 0xee, 0xb2,
                     0x3a, 0x6e, 0x5a, 0xf1, 0x55, 0x4d, 0xa8, 0xc9, 0xc1, 0xa, 0x98, 0x15, 0x30, 0x44, 0xa2, 0xc2,
                     0x2c, 0x45, 0x92, 0x6c, 0xf3, 0x39, 0x66, 0x42, 0xf2, 0x35, 0x20, 0x6f, 0x77, 0xbb, 0x59, 0x19,
                     0x1d, 0xfe, 0x37, 0x67, 0x2d, 0x31, 0xf5, 0x69, 0xa7, 0x64, 0xab, 0x13, 0x54, 0x25, 0xe9, 0x9,
                     0xed, 0x5c, 0x5, 0xca, 0x4c, 0x24, 0x87, 0xbf, 0x18, 0x3e, 0x22, 0xf0, 0x51, 0xec, 0x61, 0x17,
                     0x16, 0x5e, 0xaf, 0xd3, 0x49, 0xa6, 0x36, 0x43, 0xf4, 0x47, 0x91, 0xdf, 0x33, 0x93, 0x21, 0x3b,
                     0x79, 0xb7, 0x97, 0x85, 0x10, 0xb5, 0xba, 0x3c, 0xb6, 0x70, 0xd0, 0x6, 0xa1, 0xfa, 0x81, 0x82,
                     0x83, 0x7e, 0x7f, 0x80, 0x96, 0x73, 0xbe, 0x56, 0x9b, 0x9e, 0x95, 0xd9, 0xf7, 0x2, 0xb9, 0xa4,
                     0xde, 0x6a, 0x32, 0x6d, 0xd8, 0x8a, 0x84, 0x72, 0x2a, 0x14, 0x9f, 0x88, 0xf9, 0xdc, 0x89, 0x9a,
                     0xfb, 0x7c, 0x2e, 0xc3, 0x8f, 0xb8, 0x65, 0x48, 0x26, 0xc8, 0x12, 0x4a, 0xce, 0xe7, 0xd2, 0x62,
                     0xc, 0xe0, 0x1f, 0xef, 0x11, 0x75, 0x78, 0x71, 0xa5, 0x8e, 0x76, 0x3d, 0xbd, 0xbc, 0x86, 0x57,
                     0xb, 0x28, 0x2f, 0xa3, 0xda, 0xd4, 0xe4, 0xf, 0xa9, 0x27, 0x53, 0x4, 0x1b, 0xfc, 0xac, 0xe6,
                     0x7a, 0x7, 0xae, 0x63, 0xc5, 0xdb, 0xe2, 0xea, 0x94, 0x8b, 0xc4, 0xd5, 0x9d, 0xf8, 0x90, 0x6b,
                     0xb1, 0xd, 0xd6, 0xeb, 0xc6, 0xe, 0xcf, 0xad, 0x8, 0x4e, 0xd7, 0xe3, 0x5d, 0x50, 0x1e, 0xb3,
                     0x5b, 0x23, 0x38, 0x34, 0x68, 0x46, 0x3, 0x8c, 0xdd, 0x9c, 0x7d, 0xa0, 0xcd, 0x1a, 0x41, 0x1c};

    int __kcipher_128_bitreordering[4][128] = { {79, 121, 89, 83, 99, 31, 64, 21, 40, 62, 7, 33, 9, 114, 111, 54, 4, 68,
                                              73, 90, 103, 110, 37, 115, 41, 52, 84, 124, 8, 16, 28, 63, 10, 96, 93, 32,
                                              50, 2, 43, 109, 86, 125, 60, 119, 29, 66, 74, 18, 53, 20, 97, 42, 81, 12,
                                              1, 106, 30, 70, 35, 59, 118, 78, 120, 95, 108, 6, 47, 58, 116, 23, 11, 82,
                                              127, 65, 26, 36, 48, 91, 72, 100, 46, 104, 56, 80, 0, 27, 76, 51, 67, 22,
                                              117, 38, 126, 92, 98, 13, 17, 101, 88, 123, 57, 45, 15, 75, 107, 5, 69,
                                              49, 113, 39, 85, 25, 3, 122, 44, 77, 55, 105, 24, 112, 61, 14, 87, 102,
                                              34, 19, 71, 94},
                                              {73, 33, 14, 45, 95, 83, 1, 110, 52, 124, 16, 99, 115, 27, 64, 56, 2, 71,
                                              92, 126, 39, 101, 12, 53, 109, 116, 77, 41, 26, 22, 59, 82, 63, 36, 105,
                                              18, 121, 86, 11, 118, 46, 75, 66, 5, 89, 54, 103, 29, 125, 3, 47, 81, 76,
                                              15, 51, 102, 114, 28, 88, 108, 21, 57, 67, 38, 20, 34, 84, 106, 113, 42,
                                              91, 120, 98, 78, 55, 62, 7, 68, 8, 24, 79, 65, 10, 31, 60, 122, 6, 49, 43,
                                              32, 96, 85, 90, 23, 107, 119, 100, 40, 72, 112, 58, 4, 123, 93, 13, 111,
                                              50, 19, 37, 70, 25, 80, 44, 74, 17, 117, 87, 30, 94, 9, 69, 35, 48, 0, 61,
                                              127, 97, 104},
                                              {106, 116, 18, 98, 70, 7, 95, 125, 50, 9, 85, 59, 26, 45, 78, 34, 111, 83,
                                              94, 39, 4, 127, 48, 68, 75, 96, 28, 56, 20, 114, 8, 42, 122, 101, 47, 63,
                                              115, 6, 77, 29, 36, 17, 107, 87, 51, 11, 65, 93, 104, 55, 124, 37, 46,
                                              119, 91, 103, 13, 64, 79, 16, 30, 82, 61, 0, 120, 84, 71, 23, 27, 118, 88,
                                              57, 32, 15, 108, 52, 102, 40, 1, 72, 19, 66, 92, 24, 117, 60, 10, 105,
                                              123, 5, 49, 81, 33, 76, 41, 100, 109, 89, 31, 112, 69, 97, 126, 43, 54,
                                              14, 74, 86, 2, 58, 21, 35, 73, 62, 12, 113, 3, 121, 110, 44, 99, 38, 67,
                                              90, 80, 22, 25, 53},
                                              {25, 65, 83, 115, 76, 48, 10, 3, 47, 18, 110, 126, 98, 56, 90, 38, 99, 24,
                                              40, 72, 6, 84, 89, 69, 20, 54, 59, 33, 112, 12, 106, 120, 34, 15, 46, 2,
                                              16, 70, 101, 82, 61, 50, 118, 88, 79, 121, 104, 29, 0, 62, 22, 114, 26,
                                              75, 8, 123, 44, 107, 52, 71, 93, 100, 37, 86, 103, 51, 109, 39, 11, 57,
                                              119, 64, 95, 30, 42, 19, 73, 125, 1, 81, 9, 49, 87, 23, 91, 45, 7, 97, 68,
                                              32, 28, 124, 63, 108, 78, 117, 27, 80, 17, 77, 122, 41, 14, 5, 35, 113,
                                              67, 55, 102, 92, 105, 60, 36, 74, 96, 127, 43, 94, 4, 85, 21, 13, 111, 31,
                                              66, 116, 58, 53} };

    bitset<N> BitReordering(bitset<N>, int); // input, index

    bitset<N> SBox(bitset<N>, bitset<N>[], int); //input, rand, index

    bitset<N> EncCPA(bitset<N>, bitset<N>[], bitset<N>[]); //input, key, rand
};


#endif //K_CIPHER_KCIPHER_H
